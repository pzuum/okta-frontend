
export class OAuth {
    /** Before sending requests use this to generate a codeVerifier that will work to make sure that the request is safe
     * this will be used again when requesting the token */
     
    static generateCodeVerifier() {
        const codeVerifier = window.btoa(window.crypto.getRandomValues(new Uint8ClampedArray(16)).toString());
        const replaced = codeVerifier.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        
        return replaced;
    }
    /** Before sending requests use this to generate a codeChallenge based on the code verifier that will work to make sure that the request is safe
         * @param {string} codeVerifier - code verifier generated by the generateCodeVerifier function
         * @example https://{baseurl}/{provider}/?code_challenge={codeChallenge}...
         */

    static async generateCodeChallenge(codeVerifier: string) {
        return  this.sha256(Buffer.from(codeVerifier));
    }
    
    static base64URLEncode(str: string) {  
      const finalStr = str.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
      
        return finalStr;
    }
    
    static async sha256 (buffer: Buffer): Promise<string> {
        const hash = await  window.crypto.subtle.digest('SHA-256', buffer)
        return this.base64URLEncode(Buffer.from(hash).toString('base64'));
    }


    

    /** before sending requests use this to generate a state value and send alongside with the redirect for all Oauth providers in the query params
     * @example https://{baseurl}/{provider}/?state={stateValue}...
    */
    static generateState() {
        const state = window.btoa(window.crypto.getRandomValues(new Uint8Array(16)).toString());

        return state;

    }
    

    /** compare when trading information from backend, store it in the browser storage via local or session storage 
    /* @param {string} state - state from the the browser */
   
    static async validateState() {
        const state = localStorage.getItem('queryState');
        const urlParams = new URLSearchParams(window.location.search);

        const stateParam = urlParams.get('state');

        if (stateParam !== state) {
            return false;
        }

       

        return true;

    }
}