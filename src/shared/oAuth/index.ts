import OktaAuth from "@okta/okta-auth-js";

export class OAuth {
    

    static okta: OktaAuth;

    static init() {
        console.log(import.meta.env.VITE_OKTA_ISSUER)
        console.log(import.meta.env.VITE_OKTA_CLIENT_ID)
        console.log(import.meta.env.VITE_REDIRECT_URI)


           this.okta = new OktaAuth({
               pkce: true,
               issuer: import.meta.env.VITE_OKTA_ISSUER + '/oauth2/default',
               clientId: import.meta.env.VITE_OKTA_CLIENT_ID,
               redirectUri: import.meta.env.VITE_REDIRECT_URI,
               scopes: ['openid', 'email', 'profile'],


               
               
            });
        
    }

    static  async fetchToken() {
        return this.okta.token.getWithRedirect({
            responseType: ['token', 'id_token'],
            state: this.generateState(),
        })
    }

    static getToken() {
        return this.okta.token.parseFromUrl()
    }

    static async fetchUserInfo() {
        return this.okta.token.getUserInfo()
    }
     
    static async generateCodeVerifier() {
        if (!this.okta) this.init()
        if (!this.okta.pkce) throw new Error('pkce is not enabled')
        console.log(this.okta)
        return this.okta.pkce.generateVerifier('')
        
    }

    /** Before sending requests use this to generate a codeChallenge based on the code verifier that will work to make sure that the request is safe
     * @param {string} codeVerifier - code verifier generated by the generateCodeVerifier function
     * @example https://{baseurl}/{provider}/?code_challenge={codeChallenge}...
     */
    static async generateCodeChallenge(codeVerifier: string) {
        return this.okta.pkce.computeChallenge(codeVerifier)

        


        

    }

    static async authorize(codeVerifier: string) {
        const codeChallenge = await this.generateCodeChallenge(codeVerifier)
        this.okta.token.getWithRedirect({
            responseType: 'code',
            scopes: ['openid', 'email', 'profile'],
            state: this.generateState(),
            codeChallenge,
            codeChallengeMethod: 'S256',
            redirectUri: import.meta.env.VITE_REDIRECT_URI,
            responseMode: 'query',
            pkce: true,
            clientId: import.meta.env.VITE_OKTA_CLIENT_ID,
            issuer: import.meta.env.VITE_OKTA_ISSUER,                        
        })
    }

    

    /** before sending requests use this to generate a state value and send alongside with the redirect for all Oauth providers in the query params
     * @example https://{baseurl}/{provider}/?state={stateValue}...
    */
    static generateState() {
        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);


    }
    

    /** compare when trading information from backend, store it in the browser storage via local or session storage 
    /* @param {string} state - state from the the browser */
   
    static async validateState(state: string) {
        const urlParams = new URLSearchParams(window.location.search);

        const stateParam = urlParams.get('state');

        if (stateParam !== state) {
            return false;
        }

       

        return true;

    }
}


